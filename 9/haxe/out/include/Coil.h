// Generated by Haxe 3.4.4
#ifndef INCLUDED_Coil
#define INCLUDED_Coil

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Coil)



class HXCPP_CLASS_ATTRIBUTES Coil_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Coil_obj OBJ_;
		Coil_obj();

	public:
		enum { _hx_ClassId = 0x2c9de1af };

		void __construct(int val);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Coil")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Coil"); }
		static hx::ObjectPtr< Coil_obj > __new(int val);
		static hx::ObjectPtr< Coil_obj > __alloc(hx::Ctx *_hx_ctx,int val);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Coil_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Coil","\xaf","\xe1","\x9d","\x2c"); }

		 ::Coil left;
		 ::Coil right;
		int val;
		virtual ::String toString();
		::Dynamic toString_dyn();

		 ::Coil insert(int val);
		::Dynamic insert_dyn();

		 ::Coil _hx_delete();
		::Dynamic _hx_delete_dyn();

		 ::Coil move(int n);
		::Dynamic move_dyn();

};


#endif /* INCLUDED_Coil */ 
