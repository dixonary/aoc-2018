// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_Coil
#include <Coil.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Nine
#include <Nine.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5c600180f95581c9_28_main,"Nine","main",0xc0482cd5,"Nine.main","Nine.hx",28,0x3ffcb0ac)
HX_LOCAL_STACK_FRAME(_hx_pos_5c600180f95581c9_7_main,"Nine","main",0xc0482cd5,"Nine.main","Nine.hx",7,0x3ffcb0ac)

void Nine_obj::__construct() { }

Dynamic Nine_obj::__CreateEmpty() { return new Nine_obj; }

void *Nine_obj::_hx_vtable = 0;

Dynamic Nine_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Nine_obj > _hx_result = new Nine_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Nine_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x33deb152;
}

void Nine_obj::main(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		 cpp::Int64Struct _hx_run( cpp::Int64Struct a, cpp::Int64Struct b1){
            			HX_GC_STACKFRAME(&_hx_pos_5c600180f95581c9_28_main)
HXLINE(  28)			if ((_hx_int64_compare(a,b1) > (int)0)) {
HXLINE(  28)				return a;
            			}
            			else {
HXLINE(  28)				return b1;
            			}
HXDLIN(  28)			return null();
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_5c600180f95581c9_7_main)
HXLINE(   8)		int players = (int)424;
HXLINE(   9)		int marble = (int)7148200;
HXLINE(  10)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  10)		{
HXLINE(  10)			int _g2 = (int)0;
HXDLIN(  10)			int _g1 = players;
HXDLIN(  10)			while((_g2 < _g1)){
HXLINE(  10)				_g2 = (_g2 + (int)1);
HXDLIN(  10)				int i = (_g2 - (int)1);
HXDLIN(  10)				_g->push(_hx_int64_make((int)0,(int)0));
            			}
            		}
HXDLIN(  10)		::Array< ::Dynamic> scores = _g;
HXLINE(  11)		int player = (int)0;
HXLINE(  13)		 ::Coil coil =  ::Coil_obj::__alloc( HX_CTX ,(int)0);
HXLINE(  15)		{
HXLINE(  15)			int _g21 = (int)1;
HXDLIN(  15)			int _g11 = (marble + (int)1);
HXDLIN(  15)			while((_g21 < _g11)){
HXLINE(  15)				_g21 = (_g21 + (int)1);
HXDLIN(  15)				int i1 = (_g21 - (int)1);
HXLINE(  16)				if ((hx::Mod(i1,(int)23) == (int)0)) {
HXLINE(  17)					 ::Coil sevenBack = coil->move((int)-7);
HXLINE(  18)					 cpp::Int64Struct b = ( ::cpp::Int64Struct((i1 + sevenBack->val)));
HXDLIN(  18)					scores[player] = _hx_int64_add(scores->__get(player).StaticCast<  cpp::Int64Struct >(),b);
HXLINE(  19)					coil = sevenBack->_hx_delete();
            				}
            				else {
HXLINE(  22)					coil = coil->move((int)1)->insert(i1);
            				}
HXLINE(  24)				player = (player + (int)1);
HXLINE(  25)				player = hx::Mod(player,scores->length);
            			}
            		}
HXLINE(  28)		 cpp::Int64Struct max = ( ( cpp::Int64Struct)(::Lambda_obj::fold(scores, ::Dynamic(new _hx_Closure_0()),( ::cpp::Int64Struct((int)0)))) );
HXLINE(  29)		::Sys_obj::println(max);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Nine_obj,main,(void))


Nine_obj::Nine_obj()
{
}

bool Nine_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Nine_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Nine_obj_sStaticStorageInfo = 0;
#endif

static void Nine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Nine_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Nine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Nine_obj::__mClass,"__mClass");
};

#endif

hx::Class Nine_obj::__mClass;

static ::String Nine_obj_sStaticFields[] = {
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	::String(null())
};

void Nine_obj::__register()
{
	hx::Object *dummy = new Nine_obj;
	Nine_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Nine","\x52","\xb1","\xde","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Nine_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Nine_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Nine_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Nine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Nine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Nine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Nine_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

